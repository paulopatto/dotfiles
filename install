#!/bin/bash
# vim:syntax=sh filetype=sh

# Basic definitions
export XDG_CONFIG_HOME=$HOME/.config
export DOTFILES_HOME="$HOME/Code/dotfiles"

## Define os-platorm
export PLATFORM_ARCH="$(uname -s)" # Linux | Darwin | ...
export MACHINE_ARCH="$(uname -p)" # arm | AMD_64 | x86-64
case $PLATFORM_ARCH in 
  Linux)
    if command -v dnf > /dev/null; then
      export PLATFORM_OS="Fedora";
    elif command -v apt > /dev/null; then
      export PLATFORM_OS="Ubuntu";
    else
      echo "Unsupported linux distro $(uname -a)"
    fi
    ;;
  Darwin)
    export PLATFORM_OS="MacOS"; return;
    ;;
  *)
    echo "Invalid option $PLATFORM_ARCH"
esac

echo "Starting dotfiles installer..."
echo "+----------------------------------------------------------+"
echo "| PLATFORM_ARCH=$PLATFORM_ARCH; OS=$PLATFORM_OS;ARCH=$MACHINE_ARCH |"
echo "+----------------------------------------------------------+"


function ensure_1p() {
  echo "+----------------------------------------------------------+"
  echo "|          *** Installing 1Password  ***                   |"
  echo "+----------------------------------------------------------+"

  if command -v op > /dev/null; then
    echo -e "\033[1;32m✔️  [SKIP] O 1Password já está disponível nada a ser feito aqui.\033[0m"
    return
  fi

  if [ $PLATFORM_OS = "Fedora" ]; then
    sudo rpm --import https://downloads.1password.com/linux/keys/1password.asc
    sudo sh -c 'echo -e "[1password]\nname=1Password Stable Channel\nbaseurl=https://downloads.1password.com/linux/rpm/stable/\$basearch\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=\"https://downloads.1password.com/linux/keys/1password.asc\"" > /etc/yum.repos.d/1password.repo'
    sudo dnf install 1password
  elif [ $PLATFORM_OS = "Ubuntu" ]; then

    if [ ! -f /usr/share/keyrings/1password-archive-keyring.gpg ]; then
      curl -sS https://downloads.1password.com/linux/keys/1password.asc | sudo gpg --dearmor --output /usr/share/keyrings/1password-archive-keyring.gpg
      echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/1password-archive-keyring.gpg] https://downloads.1password.com/linux/debian/amd64 stable main' | sudo tee /etc/apt/sources.list.d/1password.list
    fi
    
    [ ! -d /etc/debsig/policies/AC2D62742012EA22/ ] && sudo mkdir -p /etc/debsig/policies/AC2D62742012EA22/
    if [ ! -f /etc/debsig/policies/AC2D62742012EA22/1password.pol ]; then
      curl -sS https://downloads.1password.com/linux/debian/debsig/1password.pol | sudo tee /etc/debsig/policies/AC2D62742012EA22/1password.pol
    fi

    [ ! -d /usr/share/debsig/keyrings/AC2D62742012EA22 ] && sudo mkdir -p /usr/share/debsig/keyrings/AC2D62742012EA22
    if [ ! -f /usr/share/debsig/keyrings/AC2D62742012EA22/debsig.gpg ]; then 
      curl -sS https://downloads.1password.com/linux/keys/1password.asc | sudo gpg --dearmor --output /usr/share/debsig/keyrings/AC2D62742012EA22/debsig.gpg
    fi
    sudo apt update -qq && sudo apt install -qq -y 1password

    if command -v op > /dev/null; then
      # Mensagem de sucesso em verde com ícone de sucesso
      echo -e "\033[1;32m✔️  [SUCESSO] O 1Password está disponível \033[0m"
    else
      # Mensagem de erro em vermelho com ícone de erro e recomendação de URL
      echo -e "\033[1;31m❌  [ERRO] O 1Password não foi instalado! \033[0m"
      echo -e "\033[1;31mPor favor, visite: https://support.1password.com/install-linux/#debian-or-ubuntu para instruções de instalação.\033[0m"
    fi
  elif [ $PLATFORM_OS = "MacOS" ]; then
    echo "Install 1Password vai App Store" 
  else
    echo "Unsupported platorm"
  fi
  echo "\n\n\n"
}


### Install base libs
function install_base_packages() {
  echo "+----------------------------------------------------------+"
  echo "|    *** Installing basic package for O.S platform ***     |"
  echo "+----------------------------------------------------------+"
  echo " === PLATFORM_ARCH=$PLATFORM_ARCH; OS=$PLATFORM_OS ==="
 
  if [ ! -d $HOME/.local/bin ]; then
    echo "[BASH] Creating .local/bin ..."
    mkdir -p $HOME/.local/bin
  fi

  if [ ! -d $XDG_CONFIG_HOME/zsh/envs ]; then
    echo "[BASH] Creating envs dir ..."
    mkdir -p $XDG_CONFIG_HOME/zsh/envs
    echo "Now put your shell envs in $XDG_CONFIG_HOME/zsh/envs"
  fi

  if [ $PLATFORM_OS = "Fedora" ]; then
    sudo dnf upgrade -q -y 
    sudo dnf groupinstall @development-tools @development-libraries
    sudo dnf install @development-tools
    # Enable repo to LazyGit
    sudo dnf copr enable atim/lazygit -y
    sudo dnf install -q -y \
      automake \
      curl \
      gcc \
      gcc-c++ \
      git \
      kernel-devel \
      libpq-devel \
      lua \
      make \
      neovim \
      nodejs \
      python3 \
      python3-devel \
      python3-pip \
      readline \
      readline-devel \
      tmux \
      wget \
      zsh \
      ripgrep \
      fd-find \
      lazygit \
      jq
    

  elif [ $PLATFORM_OS = "Ubuntu" ]; then
    sudo apt upgrade -qq -y
    sudo apt install -qq -y build-essential \
      apt-transport-https \
      curl \
      git \
      gnupg2 \
      libpq-dev \
      libreadline-dev \
      lua5.3 \
      neovim \
      python3 \
      python3-dev \
      python3-pip \
      tmux \
      wget \
      zsh \
      ripgrep \
      fd-find \
      jq
    

    if ! command -v op > /dev/null; then
      echo -e "\033[1;33m⚠️  Atenção: O Ubuntu não possui uma versão do LazyGit disponível nos repositórios APT.\033[0m"
      echo -e "\033[1;33mVamos precisará instalar o LazyGit manualmente via script.\033[0m"
      echo -e "\033[1;33mPara isso, se esse script não conseguir fazer essa instalação siga as instruções no repositório oficial.\033[0m"

      LAZYGIT_VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')
      curl -Lo lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz"
      tar xf lazygit.tar.gz lazygit
      sudo install lazygit /usr/local/bin      
    fi
  elif [ $PLATFORM_OS = "MacOS" ]; then
    brew upgrade -y
    brew install zsh coreutils curl git wget tmux neovim ripgrep fd lazygit jq
  else
    echo -e "\033[1;31m❌  [ERRO] Unsupported platorm. \033[0m"
    return
  fi

  echo -e "\033[1;32m✔️  [SUCESSO] O basic packages for $PLATFORM_OS has been installed \033[0m\n\n\n"
}

function config_git() {
  echo "+----------------------------------------------------------+"
  echo "|             *** Configuring GIT SCM  ***                 |"
  echo "+----------------------------------------------------------+"

  if [ ! -L $HOME/.gitconfig ]; then
    echo "[*] Copy .gitconfig"
    ln -s $DOTFILES_HOME/gitconfig $HOME/.gitconfig
  fi

  case $PLATFORM_ARCH in
    Linux)
      if [ ! -L $HOME/.gitconfig-ssh ]; then
        echo "[*] Config git for $PLATFORM_ARCH"
        ln -s $DOTFILES_HOME/gitconfig-linux $HOME/.gitconfig-ssh
      fi
      ;;
    Darwin)
      if [ ! -L $HOME/.gitconfig-ssh ]; then
        echo "[*] Config git for $PLATFORM_ARCH"
        ln -s $DOTFILES_HOME/gitconfig-osx $HOME/.gitconfig-ssh
      fi
      ;;
    *)
      echo "Invalid option $PLATFORM_ARCH"
  esac

  if [ ! -L $HOME/.gitignore_global ]; then
    echo "[*] Copy .gitignore_global"
    ln -s $DOTFILES_HOME/gitignore_global $HOME/.gitignore_global
  fi
  echo -e "\033[1;32m✔️  [SUCESSO] GIT configured \033[0m\n\n\n"
}

function ensure_tmux_installed() {
  echo "+----------------------------------------------------------+"
  echo "|              *** Configuring TMUX  ***                   |"
  echo "+----------------------------------------------------------+"

  # Ensure tmux installed
  if ! command -v tmux &> /dev/null 
  then 
    echo "[TMUX] Installing tmux for $PLATFORM_OS ..."

    if [ $PLATFORM_OS = "Fedora" ]; then
      sudo dnf install -y tmux
    elif [ $PLATFORM_OS = "Ubuntu" ]; then
      sudo apt install -y tmux
    elif [ $PLATFORM_OS = "MacOS" ]; then
      brew install tmux
    else
      echo "Unsupported platorm"
    fi
  fi

  if [ ! -d $XDG_CONFIG_HOME/tmux/plugins/tpm ]; then
    echo "[*] Install TMUX Plugin Manager (TPM)"
    git clone https://github.com/tmux-plugins/tpm $XDG_CONFIG_HOME/tmux/plugins/tpm
    echo "+------------------------------------------------------------------------------------------------------------------------------+"
    echo "| Press [prefix] + [I] (capital i, as in Install) Installs new plugins from GitHub or any other git repository & refresh env.  |"
    echo "| Press [prefix] + [U] (capital u, as in Update) updates plugin(s).                                                            |"
    echo "| Visit https://github.com/tmux-plugins/tpm                                                                                    |"
    echo "+------------------------------------------------------------------------------------------------------------------------------+"
  else
    echo "[ ] Install TMUX Plugin Manager (TPM) (SKIPPED)"
  fi
  

  if [ !  -d $XDG_CONFIG_HOME/tmux/ ];then 
    echo "- Creates tmux config dir at $XDG_CONFIG_HOME/tmux/" 
    mkdir -p $XDG_CONFIG_HOME/tmux/
  fi 

  if [ ! -L $XDG_CONFIG_HOME/tmux/tmux.conf ]; then
    echo "- Linking .tmux.conf "
    ln -s $DOTFILES_HOME/tmux/tmux.conf $XDG_CONFIG_HOME/tmux/tmux.conf
  fi

  # if [ ! -L $HOME/.tmux.conf ]; then
  #   ln -s $DOTFILES_HOME/tmux/tmux.conf $HOME/.tmux.conf
  # fi
  echo -e "\033[1;32m✔️  [SUCESSO] TMUX configued \033[0m\n\n"
}



function ensure_zplug_installed() {
  # Ensure zplug has been installed
  echo "+----------------------------------------------------------+"
  echo "|           *** Ensure zplug instaleld  ***                |"
  echo "+----------------------------------------------------------+"
  if [ ! -d $XDG_CONFIG_HOME/zsh/plugins/zplug ]; then
    echo "[ZSH] Install zplug - Zsh Plugin Manager"
    git clone https://github.com/zplug/zplug $XDG_CONFIG_HOME/zsh/plugins/zplug
    echo "[ZSH] Zplugin installed, can you run: zplug install" 
    zplug install
  else
    echo "[ZSH] zplug - Zsh Plugin Manager Alrady configured run '$ zplug install'"
    echo -e "\033[1;32m✔️  [SUCESSO] Zsh Plugin Manager Alrady configured run '$ zplug install' \033[0m\n\n"
  fi
}

function ensure_asdf_installed() {
  echo "+----------------------------------------------------------+"
  echo "|             *** Configuring ASDF-VM  ***                 |"
  echo "+----------------------------------------------------------+"
  export ASDF_HOME=$XDG_CONFIG_HOME/asdf/
  export ASDF_DIR=$ASDF_HOME
  export ASDF_TARGET_VERSION="v0.16.2"
  platform_lower=$(echo $PLATFORM_ARCH | tr '[:upper:]' '[:lower:]')

  # Converter MACHINE_ARCH para o formato correto
  if [ "$MACHINE_ARCH" == "ARM_64" ]; then
    machine_arch="arm64"
  elif [ "$MACHINE_ARCH" == "AMD_64" || "$MACHINE_ARCH" == "x86_64" ]; then
    machine_arch="amd64"
  else
    #machine_arch=$(echo $MACHINE_ARCH | tr '[:upper:]' '[:lower:]')
    machine_arch="amd64"
  fi
  asdf_bin_ver="asdf-${ASDF_TARGET_VERSION}-${platform_lower}-${machine_arch}.tar.gz"

  if ! command -v asdf > /dev/null ; then
    echo "- Download asdf Release $ASDF_TARGET_VERSION ($asdf_bin_ver)"
    echo "\t clonning from https://github.com/asdf-vm/asdf/releases/download/$ASDF_TARGET_VERSION/$asdf_bin_ver"

    curl -L https://github.com/asdf-vm/asdf/releases/download/$ASDF_TARGET_VERSION/$asdf_bin_ver -o /tmp/$asdf_bin_ver

    if [ $? -eq 0 ]; then
      echo "- Download successful, extracting the archive"

      tar -xvzf /tmp/$asdf_bin_ver -C $HOME/.local/bin

      if [ -f $HOME/.local/bin/asdf ]; then
        echo "- asdf binary installed successfully at $HOME/.local/bin/asdf"
        
        if command -v asdf > /dev/null; then
          echo "- asdf is available for zsh"
        else
          echo "- asdf is not available in zsh. Ensure $HOME/.local/bin is in your PATH."
        fi
      else
        echo "- Error: asdf binary extraction failed!"
      fi
    else
      echo "- Error: Failed to download $asdf_bin_ver"
    fi
  else
    echo "[ ] Clonning repo (SKIPPED)"
  fi

  if [ ! -L $HOME/.asdfrc ]; then
    echo "[*] Config asdfrc"
    ln -s $DOTFILES_HOME/asdfrc $HOME/.default-golang-pkgs
  else 
    echo "[ ] Config asdfrc (SKIPPED)"
  fi

  if [ ! -L $HOME/.asdfrc ]; then
    echo "[*] Config asdfrc"
    ln -s $DOTFILES_HOME/asdfrc $HOME/.asdfrc
  else
    echo "[ ] Config asdfrc (SKIPPED)"
  fi
  if [ ! -L $HOME/.default-gems ]; then
    echo "[*] Config default packages for rubies"
    ln -s $DOTFILES_HOME/defaul-gems $HOME/.default-gems
  else
    echo "[ ] Config default packages for rubies (SKIPPED)"
  fi

  if [ ! -L $HOME/.default-npm-packages ]; then
    echo "[*] Config default packages for nodejs"
    ln -s $DOTFILES_HOME/default-npm-packages $HOME/.default-npm-packages
  else
    echo "[ ] Config default packages for nodejs (SKIPPED)"
  fi

  if [ ! -L $HOME/.default-python-packages ]; then
    echo "[*] Config default packages for python"
    ln -s $DOTFILES_HOME/default-python-packages $HOME/.default-python-packages
  else
    echo "[ ] Config default packages for python (SKIPPED)"
  fi
}

function ensure_neovim() {
  export NEOVIM_CONF_HOME=$XDG_CONFIG_HOME/nvim

  echo "+----------------------------------------------------------+"
  echo "|          *** Install and config neovim  ***              |"
  echo "+----------------------------------------------------------+"

  if ! command -v nvim > /dev/null; then
    echo "❌ Install neovim (not supported), please install manual"
  fi

  if ! command -v lua > /dev/null; then
    echo "❌ Please install LUA"
    echo "    run: 'asdf plugin add lua && asdf plugin add lua-language-server && asdf install lua latest && asdf global lua latest'"
  fi

  if [ ! -L $NEOVIM_CONF_HOME/init.lua ]; then
    echo "[*] creates symlink to init.lua"
    ln -s $DOTFILES_HOME/nvim/init.lua $NEOVIM_CONF_HOME/init.lua
  fi

  if [ ! -d $NEOVIM_CONF_HOME/lua ]; then
    echo "[*] creates symlink to lua config folder"
    ln -s $DOTFILES_HOME/nvim/lua/ $NEOVIM_CONF_HOME/lua
  fi
}

install_base_packages
ensure_1p
config_git
ensure_zplug_installed
ensure_asdf_installed
ensure_tmux_installed
ensure_neovim
